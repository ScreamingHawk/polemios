#!/usr/bin/env node

/**
 * Load main app
 */
require('../main')(function(app){
	/**
	 * Module dependencies.
	 */
	var io = require('socket.io');
	var debug = require('debug')('polemios:server');
	var http = require('http');
	var mysql = require('mysql');
	var sharedSession = require("express-socket.io-session");

	/**
	 * Get port from environment and store in Express.
	 */

	var port = normalizePort(process.env.POLEMIOS_PORT || '3000');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	var server = http.createServer(app);

	/**
	 * Create chat listener.
	 */

	var chat = require('../chat')(server);
	chat.use(sharedSession(app.session, {autoSave: true}));

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	/**
	 * Database connections
	 */
	var pool = mysql.createPool({
		host: process.env.POLEMIOS_DB_HOST,
		user: process.env.POLEMIOS_DB_USER,
		password: process.env.POLEMIOS_DB_SECRET,
		database: process.env.POLEMIOS_DB_SCHEMA,
		connectionLimit: process.env.POLEMIOS_DB_MAX_CONNECTIONS,
		debug: false
	});

	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
		var port = parseInt(val, 10);

		if (isNaN(port)) {
			// named pipe
			return val;
		}

		if (port >= 0) {
			// port number
			return port;
		}

		return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		var addr = server.address();
		var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}

});